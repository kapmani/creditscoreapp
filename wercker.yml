box: node:6.10
build:
  steps:
    - script:
        name: A step that executes `npm install` command
        code: npm install  
    - script:
        name: Create TLS key and cert
        code: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=nginxsvc/O=nginxsvc"

push-to-releases:
  steps:
    # Push to public docker repo Container Registry (CR)
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: mankap/jscreditscore
        registry: $DOCKER_REGISTRY
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        cmd: node /pipeline/source/app.js

deploy-to-oke:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - bash-template
    
    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes-deployment.yml
        
    - kubectl:
        name: delete secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret ocir --namespace=manish; echo delete registry secret     
        
    - script:
        name: wait to delete secret
        code: sleep 3
    
    - kubectl:
        name: create OCR secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry ocir --docker-server=$DOCKER_REGISTRY --docker-username=$DOCKER_USERNAME --docker-password=\'$DOCKER_PASSWORD\' --docker-email=$DOCKER_EMAIL --namespace=manish
    
    - script:
        name: wait 
        code: sleep 3  
        
    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_ROOT/kubernetes-deployment.yml --namespace=manish

    - script:
        name: "Visualise Ingress config"
        code: cat ingress.yml

    - script:
        name: wait 
        code: sleep 3
        
    - kubectl:
        name: create Ingress configuration
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_ROOT/ingress.yml --namespace=manish
    
    - script:
        name: wait 
        code: sleep 3
        
    - kubectl:
        name: get LoadBalancer public IP address
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces

functional-test:
  steps:
    - script:
        name: Run and Test microservice
        code: |
              mkdir -p "/pipeline"
              node $WERCKER_ROOT/app.js &
              sleep 5
              CREDITSCORE_URL=http://localhost:3000/creditscore
              echo 'Microservice URL=' $CREDITSCORE_URL
              if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
              then
                  # if the keyword is in the conent
                  echo "Test passed"
              else
                  echo "Test failed"
                  exit -1
              fi
              sleep 1
ui-functional-test:
  box:
    id: peternagy/chrome-protractor-headless-test:node9.2-chrome62
  steps:
    - script:
        name: Run UI test
        code: | 
              nohup node $WERCKER_ROOT/app.js > creditscoreapp.log &
              echo 'Application URL to test: http://localhost:3000/creditscore'
              protractor $WERCKER_ROOT/test/protractor.conf.js
              exit_status=$?
              echo 'CreditScore app server log :::START'
              cat creditscoreapp.log
              echo 'CreditScore app server log :::END'
              if [ $exit_status -eq 0 ]; then
                echo "UI test passed"
              else
                echo "UI test failed"
                exit -1
              fi                
              
